/*
 * dbsquared
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jan.christian@gruenhage.xyz
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};
use diesel::Queryable;
use diesel::backend::Backend;

#[derive(Debug, Serialize, Deserialize)]
pub enum Content {
    #[serde(rename = "sql")]
    SQL { row_order_matters: bool },
    #[serde(rename = "multiple_choice")]
    MC { answer_options: Vec<String> },
    Plaintext(String),
    Instruction,
}

impl<DB, ST> Queryable<ST, DB> for Content
where
    DB: Backend,
    String: Queryable<ST, DB>,
{
    type Row = <String as Queryable<ST, DB>>::Row;

    fn build(row: Self::Row) -> Self {
        match serde_json::from_str(&String::build(row)) {
            Ok(result) => {
                result
            },
            Err(e) => {
                Content::Plaintext(format!("Error: {}", e))
            }
        }
    }
}
