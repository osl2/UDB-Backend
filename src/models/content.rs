/*
 * dbsquared
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jan.christian@gruenhage.xyz
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};
use diesel::{Queryable, IntoSql, deserialize, serialize};
use diesel::expression::AsExpression;
use diesel::backend::Backend;
use diesel::serialize::{ToSql, Output, IsNull};
use std::io::Write;
use crate::models::solution::{SQLSolution, MCSolution, PlaintextSolution};
use diesel::deserialize::FromSql;
use diesel::sql_types::Text;
use std::error::Error;


#[derive(Debug, Serialize, Deserialize, FromSqlRow, AsExpression)]
#[sql_type = "Text"]
pub enum Content {
    #[serde(rename = "sql")]
    SQL { row_order_matters: bool, solution: SQLSolution },
    #[serde(rename = "multiple_choice")]
    MC { answer_options: Vec<String>, solution: MCSolution },
    #[serde(rename = "plaintext")]
    Plaintext { solution: PlaintextSolution },
    #[serde(rename = "instruction")]
    Instruction,
    Error(String),
}

//special to and from sql traits because content gets saved as json

impl<DB> FromSql<Text, DB> for Content
where
    DB: Backend,
    String: FromSql<Text, DB>,
{
    fn from_sql(bytes: Option<&DB::RawValue>) -> deserialize::Result<Self> {
        match String::from_sql(bytes) {
            Ok(json) => match serde_json::from_str(&json) {
                Ok(content) => Ok(content),
                Err(x) => Err(Box::new(x)),
            },
            Err(e) => Err(e)
        }
    }
}

impl<DB> ToSql<Text, DB> for Content
where
    DB: Backend,
    String: FromSql<Text, DB>,
{
    fn to_sql<W: Write>(&self, out: &mut Output<W, DB>) -> serialize::Result {
        match serde_json::to_string(self) {
            Ok(json) => out.write_fmt(format_args!("{}", json))
                .map(|_| IsNull::No)
                .map_err(|e| Box::new(e) as Box<dyn Error + Send + Sync>),
            Err(e) => Err(Box::new(e)),
        }
    }
}